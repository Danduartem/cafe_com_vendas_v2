<!-- GTM Preview Mode Fix v2.0 -->
<script>
(function() {
  'use strict';
  
  /**
   * Enhanced GTM Preview Mode Fix
   * 
   * Intercepts dataLayer pushes to force all GA4 configurations to use our proxy,
   * solving the cross-site cookie blocking issue for Server GTM preview mode.
   * 
   * This implementation prevents GTM from overriding transport_url configurations.
   */
  
  // Configuration
  const PROXY_ENDPOINT = '/.netlify/functions/gtm-proxy';
  const SERVER_GTM_ENDPOINT = 'https://server-side-tagging-m5scdmswwq-uc.a.run.app';
  const GA4_MEASUREMENT_ID = 'G-T06WRKJGRW';
  
  let isPreviewMode = false;
  let previewToken = null;
  let originalDataLayerPush = null;
  let originalFetch = null;
  let originalXMLHttpRequest = null;
  
  /**
   * Detect if GTM preview mode is active
   */
  function detectPreviewMode() {
    // Check URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('gtm_debug') || urlParams.has('gtm_preview')) {
      return true;
    }
    
    // Check for preview mode cookies
    const cookies = document.cookie;
    if (cookies.includes('gtm_auth') || 
        cookies.includes('gtm_preview') || 
        cookies.includes('gtm_debug')) {
      return true;
    }
    
    // Check if Google Tag Manager debugger is active
    if (window.google_tag_manager && window.google_tag_manager.dataLayer) {
      return true;
    }
    
    // Check for tag assistant
    if (document.referrer && document.referrer.includes('tagassistant.google.com')) {
      return true;
    }
    
    return false;
  }
  
  /**
   * Get preview mode token from URL or cookies
   */
  function getPreviewToken() {
    // Extract from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const gtmDebug = urlParams.get('gtm_debug');
    if (gtmDebug) {
      return gtmDebug;
    }
    
    // Extract from cookies
    const cookies = document.cookie.split(';');
    for (const cookie of cookies) {
      const [name, value] = cookie.trim().split('=');
      if (name === 'gtm_auth' || name === 'gtm_preview') {
        return value;
      }
    }
    
    return null;
  }
  
  /**
   * Check if a URL should be proxied
   */
  function shouldProxyRequest(url) {
    if (typeof url !== 'string') return false;
    return url.includes('/g/collect') || 
           url.includes('/mp/collect') || 
           url.includes(SERVER_GTM_ENDPOINT) ||
           url.includes('google-analytics.com') ||
           url.includes('analytics.google.com') ||
           url.includes('/.netlify/functions/gtm-proxy'); // Catch existing proxy URLs
  }
  
  /**
   * Transform Server GTM URLs to use our proxy
   */
  function transformUrlToProxy(url) {
    if (!shouldProxyRequest(url)) return url;
    
    // Parse the URL to extract query parameters
    try {
      const urlObj = new URL(url);
      
      // If it's already pointing to localhost proxy, leave it alone
      if (urlObj.hostname === window.location.hostname && urlObj.pathname === PROXY_ENDPOINT) {
        return url;
      }
      
      // Transform any proxy URLs or Server GTM/GA URLs to use localhost proxy
      if (urlObj.hostname.includes('server-side-tagging') || 
          urlObj.hostname.includes('google-analytics.com') ||
          urlObj.hostname.includes('analytics.google.com') ||
          urlObj.pathname.includes('/g/collect') ||
          urlObj.pathname.includes('/mp/collect') ||
          urlObj.pathname.includes('/.netlify/functions/gtm-proxy')) {
        
        const proxyUrl = `${window.location.origin}${PROXY_ENDPOINT}${urlObj.search}`;
        
        console.log('[GTM Preview Fix] Transformed URL:', {
          original: `${urlObj.hostname}${urlObj.pathname}${urlObj.search.substring(0, 50)}...`,
          proxy: proxyUrl.substring(0, 80) + '...'
        });
        
        return proxyUrl;
      }
      
      // Don't transform other URLs
      return url;
    } catch (error) {
      console.warn('[GTM Preview Fix] Failed to transform URL:', url.substring(0, 100), error);
      return url;
    }
  }
  
  /**
   * Enhanced dataLayer push interceptor
   */
  function createDataLayerInterceptor() {
    // Ensure dataLayer exists
    window.dataLayer = window.dataLayer || [];
    
    // Store original push method
    if (!originalDataLayerPush) {
      originalDataLayerPush = window.dataLayer.push.bind(window.dataLayer);
    }
    
    // Override dataLayer.push to intercept GA4 config calls
    window.dataLayer.push = function(...args) {
      const modifiedArgs = args.map(item => {
        if (item && typeof item === 'object') {
          // Intercept 'config' events for GA4
          if (item.event === 'gtag' && item['gtag.parameter_keys']) {
            const params = item['gtag.parameter_keys'];
            if (params && params.includes('transport_url')) {
              // Force our proxy URL for transport_url
              item[GA4_MEASUREMENT_ID + '.transport_url'] = window.location.origin + PROXY_ENDPOINT;
              
              console.log('[GTM Preview Fix] Intercepted GA4 config, forced proxy transport_url:', {
                measurementId: GA4_MEASUREMENT_ID,
                transportUrl: item[GA4_MEASUREMENT_ID + '.transport_url']
              });
            }
          }
          
          // Intercept direct gtag calls
          if (item.event === 'gtag' && item.method === 'config' && item.target === GA4_MEASUREMENT_ID) {
            if (!item.parameters) item.parameters = {};
            item.parameters.transport_url = window.location.origin + PROXY_ENDPOINT;
            item.parameters.transport_type = 'xhr';
            
            console.log('[GTM Preview Fix] Intercepted direct gtag config, added transport_url');
          }
        }
        
        return item;
      });
      
      return originalDataLayerPush(...modifiedArgs);
    };
    
    console.log('[GTM Preview Fix] DataLayer interceptor installed');
  }
  
  /**
   * Enhanced fetch interceptor
   */
  function createFetchInterceptor() {
    if (originalFetch) return; // Already installed
    
    originalFetch = window.fetch;
    window.fetch = function(url, options = {}) {
      if (shouldProxyRequest(url)) {
        const transformedUrl = transformUrlToProxy(url);
        
        // Add preview headers
        const headers = new Headers(options.headers || {});
        if (previewToken) {
          headers.set('X-Gtm-Server-Preview', previewToken);
        }
        
        options = {
          ...options,
          headers: headers,
          credentials: 'include'
        };
        
        console.log('[GTM Preview Fix] Intercepted fetch request:', {
          transformed: transformedUrl !== url,
          hasPreviewHeader: !!previewToken
        });
        
        return originalFetch.call(this, transformedUrl, options);
      }
      
      return originalFetch.call(this, url, options);
    };
  }
  
  /**
   * Enhanced XMLHttpRequest interceptor
   */
  function createXHRInterceptor() {
    if (originalXMLHttpRequest) return; // Already installed
    
    originalXMLHttpRequest = window.XMLHttpRequest;
    
    function InterceptedXMLHttpRequest() {
      const xhr = new originalXMLHttpRequest();
      const originalOpen = xhr.open.bind(xhr);
      const originalSetRequestHeader = xhr.setRequestHeader.bind(xhr);
      
      xhr.open = function(method, url, ...args) {
        if (shouldProxyRequest(url)) {
          const transformedUrl = transformUrlToProxy(url);
          
          console.log('[GTM Preview Fix] Intercepted XHR request:', {
            method: method,
            transformed: transformedUrl !== url
          });
          
          return originalOpen.call(this, method, transformedUrl, ...args);
        }
        
        return originalOpen.call(this, method, url, ...args);
      };
      
      xhr.setRequestHeader = function(name, value) {
        // Add preview header for GTM requests
        originalSetRequestHeader.call(this, name, value);
        
        if (previewToken && this._url && shouldProxyRequest(this._url)) {
          originalSetRequestHeader.call(this, 'X-Gtm-Server-Preview', previewToken);
        }
      };
      
      return xhr;
    }
    
    // Copy static properties
    Object.setPrototypeOf(InterceptedXMLHttpRequest.prototype, originalXMLHttpRequest.prototype);
    Object.setPrototypeOf(InterceptedXMLHttpRequest, originalXMLHttpRequest);
    
    window.XMLHttpRequest = InterceptedXMLHttpRequest;
  }
  
  /**
   * Override gtag function to force transport_url
   */
  function overrideGtagFunction() {
    // Wait for gtag to be available
    const waitForGtag = () => {
      if (typeof window.gtag === 'function') {
        const originalGtag = window.gtag;
        
        window.gtag = function(command, targetId, config, ...args) {
          // Intercept 'config' commands for our GA4 measurement ID
          if (command === 'config' && targetId === GA4_MEASUREMENT_ID) {
            config = config || {};
            config.transport_url = window.location.origin + PROXY_ENDPOINT;
            config.transport_type = 'xhr';
            
            if (previewToken) {
              config.preview_token = previewToken;
            }
            
            console.log('[GTM Preview Fix] Intercepted gtag config, forced transport_url:', {
              measurementId: targetId,
              transportUrl: config.transport_url
            });
          }
          
          return originalGtag.call(this, command, targetId, config, ...args);
        };
        
        console.log('[GTM Preview Fix] Gtag function override installed');
      } else {
        setTimeout(waitForGtag, 100);
      }
    };
    
    waitForGtag();
  }
  
  /**
   * Initialize enhanced preview mode fix
   */
  function init() {
    isPreviewMode = detectPreviewMode();
    
    if (isPreviewMode) {
      previewToken = getPreviewToken();
      
      console.log('[GTM Preview Fix v2.0] Preview mode detected, installing enhanced interceptors:', {
        previewToken: previewToken ? previewToken.substring(0, 10) + '...' : 'none',
        proxyEndpoint: PROXY_ENDPOINT
      });
      
      // Install all interceptors
      createDataLayerInterceptor();
      createFetchInterceptor();
      createXHRInterceptor();
      overrideGtagFunction();
      
      console.log('[GTM Preview Fix] All interceptors installed successfully');
    } else {
      console.log('[GTM Preview Fix] Preview mode not detected, running in standard mode');
    }
  }
  
  // Initialize immediately to catch early dataLayer pushes
  init();
  
  // Also initialize when DOM is ready for safety
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  }
})();
</script>